{
  "workflow": [
    {
      "task": "prompt",
      "name": "app_name",
      "message": "Enter the name of your blog",
      "type": "input",
      "default": "docs-blog"
    },
    {
      "task": "npm_execute",
      "command": "create next-app@latest {{app_name}} --no-src-dir --app --typescript --tailwind --eslint --yes",
      "package_manager": "auto"
    },
    {
      "task": "execute",
      "command": "cd {{app_name}}",
      "package_manager": "auto",
      "depends": ["app_name"]
    },
    {
      "task": "npm_execute",
      "commands": [
        "shadcn@latest init --base-color neutral --yes",
        "shadcn@latest add button popover badge card --yes",
        "shadcn@latest add https://21st.dev/r/designali-in/book --yes"
      ],
      "package_manager": "auto"
    },
    {
      "task": "npm_install",
      "packages": [
        "zod",
        "fumadocs-ui",
        "fumadocs-core",
        "fumadocs-mdx",
        "@types/mdx",
        "fumadocs-twoslash",
        "rehype-katex",
        "remark-math",
        "fumadocs-docgen",
        "@shikijs/transformers",
        "shiki",
        "katex",
        "twoslash"
      ],
      "package_manager": "auto"
    },
    {
      "task": "edit_json",
      "file": "package.json",
      "operations": [
        {
          "type": "merge",
          "path": "scripts",
          "value": {
            "postinstall": "fumadocs-mdx"
          }
        }
      ]
    },
    {
      "task": "execute",
      "command": "rm -f next.config.js next.config.mjs",
      "description": "Remove existing next.config files before fetching new ones"
    },
    {
      "task": "gh_fetch",
      "items": [
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/lib",
          "destination": "lib",
          "type": "directory"
        },
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/source.config.ts",
          "destination": "source.config.ts.original",
          "type": "file"
        },
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/content/docs",
          "destination": "content/docs",
          "type": "directory"
        },
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/app/(home)",
          "destination": "app/(home)",
          "type": "directory"
        },
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/app/api/search",
          "destination": "app/api/search",
          "type": "directory"
        },
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/app/docs-og",
          "destination": "app/docs-og",
          "type": "directory"
        },
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/app/docs",
          "destination": "app/docs",
          "type": "directory"
        },
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/mdx-components.tsx",
          "destination": "mdx-components.tsx",
          "type": "file"
        },
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/app/layout.config.tsx",
          "destination": "app/layout.config.tsx",
          "type": "file"
        },
        {
          "repo": "fuma-nama/fumadocs",
          "source": "examples/next-mdx/next.config.mjs",
          "destination": "next.config.mjs",
          "type": "file"
        },
        {
          "repo": "rjvim/rjvim.github.io",
          "source": "packages/fumadocs-blog/src",
          "destination": "fumadocs-blog",
          "type": "directory"
        },
        {
          "repo": "rjvim/rjvim.github.io",
          "source": "apps/web/app/(home)/blog",
          "destination": "app/(home)/blog",
          "type": "directory"
        },
        {
          "repo": "rjvim/rjvim.github.io",
          "source": "apps/web/app/blog-og",
          "destination": "app/blog-og",
          "type": "directory"
        }
      ]
    },
    {
      "task": "merge_ts_file",
      "files": [
        {
          "path": "source.config.ts",
          "content": "import {\n  defineCollections,\n  defineConfig,\n  frontmatterSchema,\n} from \"fumadocs-mdx/config\";\nimport { z } from \"zod\";\nimport { transformerTwoslash } from \"fumadocs-twoslash\";\nimport rehypeKatex from \"rehype-katex\";\nimport remarkMath from \"remark-math\";\nimport {\n  transformerRemoveNotationEscape,\n  transformerNotationHighlight,\n  transformerNotationFocus,\n  transformerMetaHighlight,\n} from \"@shikijs/transformers\";\nimport { remarkInstall } from \"fumadocs-docgen\";\nimport { rehypeCodeDefaultOptions } from \"fumadocs-core/mdx-plugins\";\n\nexport const blog = defineCollections({\n  type: \"doc\",\n  dir: \"content/blog\",\n  schema: frontmatterSchema.extend({\n    author: z.string(),\n    date: z\n      .string()\n      .or(z.date())\n      .transform((value, context) => {\n        try {\n          return new Date(value);\n        } catch {\n          context.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: \"Invalid date\",\n          });\n          return z.NEVER;\n        }\n      }),\n    tags: z.array(z.string()).optional(),\n    image: z.string().optional(),\n    draft: z.boolean().optional().default(false),\n    series: z.string().optional(),\n    seriesPart: z.number().optional(),\n  }),\n});\n\nexport default defineConfig({\n  lastModifiedTime: \"git\",\n  mdxOptions: {\n    providerImportSource: \"@/mdx-components\",\n    rehypeCodeOptions: {\n      inline: \"tailing-curly-colon\",\n      themes: {\n        light: \"github-light\",\n        dark: \"github-dark\",\n      },\n      transformers: [\n        ...(rehypeCodeDefaultOptions.transformers ?? []),\n        transformerTwoslash(),\n        transformerRemoveNotationEscape(),\n        transformerNotationFocus(),\n        transformerMetaHighlight(),\n      ],\n    },\n    remarkPlugins: [remarkMath, remarkInstall],\n    rehypePlugins: (v) => [rehypeKatex, ...v],\n  },\n});\n",
          "strategy": "smart-merge"
        }
      ]
    },
    {
      "task": "merge_file",
      "files": [
        {
          "path": "app/layout.tsx",
          "content": "import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport { RootProvider } from \"fumadocs-ui/provider\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <RootProvider>{children}</RootProvider>\n      </body>\n    </html>\n  );\n}\n",
          "strategy": "replace",
          "onConflict": "report"
        }
      ]
    },
    {
      "task": "execute",
      "commands": [
        "sed -i.bak 's|@repo/fumadocs-blog/blog|@/fumadocs-blog|g' 'app/(home)/blog/[[...slug]]/page.tsx' && rm -f 'app/(home)/blog/[[...slug]]/page.tsx.bak'",
        "sed -i.bak 's|@repo/fumadocs-blog/blog|@/fumadocs-blog|g' 'app/blog-og/[[...slug]]/route.tsx' && rm -f 'app/blog-og/[[...slug]]/route.tsx.bak'"
      ],
      "description": "Fix import paths in the fetched files"
    },
    {
      "task": "write",
      "files": [
        {
          "path": "blog-configuration.tsx",
          "content": "import type { Metadata } from \"next/types\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Book } from \"@/components/ui/book\";\nimport { Card } from \"@/components/ui/card\";\nimport type { BlogConstants, BlogConfiguration } from \"@/fumadocs-blog\";\nimport { PostCard } from \"@/fumadocs-blog\";\nimport {\n  Brain,\n  Book as LucideBook,\n  Code,\n  Cog,\n  Lightbulb,\n  Megaphone,\n  Rocket,\n  Users,\n  Wrench,\n  BookIcon,\n} from \"lucide-react\";\n\n// Blog text constants that can be customized\n\nexport const blogConstants: BlogConstants = {\n  // General\n  blogTitle: \"Blog\",\n  blogDescription: \"Articles and thoughts\",\n  siteName: \"myblog.com\",\n  defaultAuthorName: \"My Name\",\n  xUsername: \"@my_x_username\",\n  // Pagination\n  paginationTitle: (page: number) => `Blog - Page ${page}`,\n  paginationDescription: (page: number) =>\n    `Articles and thoughts - Page ${page}`,\n  categoryPaginationTitle: (category: string, page: number) =>\n    `${category.charAt(0).toUpperCase() + category.slice(1)} - Page ${page}`,\n  categoryPaginationDescription: (category: string, page: number) =>\n    `Articles in the ${category} category - Page ${page}`,\n  // URLs\n  blogBase: \"/blog\",\n  blogOgImageBase: \"blog-og\",\n  pageSize: 5,\n};\n\nexport function createBlogMetadata(\n  override: Metadata,\n  blogConstants: BlogConstants\n): Metadata {\n  // Derive values from the core properties\n  const siteUrl = `https://${blogConstants.siteName}`;\n  const author = {\n    name: blogConstants.defaultAuthorName,\n    url: siteUrl,\n  };\n  const creator = blogConstants.defaultAuthorName;\n\n  return {\n    ...override,\n    authors: [author],\n    creator: creator,\n    openGraph: {\n      title: override.title ?? undefined,\n      description: override.description ?? undefined,\n      url: siteUrl,\n      siteName: blogConstants.siteName,\n      ...override.openGraph,\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      site: blogConstants.xUsername,\n      creator: blogConstants.xUsername,\n      title: override.title ?? undefined,\n      description: override.description ?? undefined,\n      ...override.twitter,\n    },\n    alternates: {\n      canonical: \"/\",\n      types: {\n        \"application/rss+xml\": \"/api/rss.xml\",\n      },\n      ...override.alternates,\n    },\n  };\n}\n\nexport function getBlogConfiguration(): BlogConfiguration {\n  return {\n    PostCard: PostCard,\n    Button,\n    Popover,\n    PopoverContent,\n    PopoverTrigger,\n    Badge,\n    Book,\n    Card,\n    cn,\n    config: {\n      blogBase: blogConstants.blogBase,\n      blogOgImageBase: blogConstants.blogOgImageBase,\n      pageSize: 5,\n    },\n  };\n}\n\nexport const useBlogConfiguration = getBlogConfiguration;\n\n// Moved from lib/categories.ts\nexport const getCategoryBySlug = (slug: string) => {\n  const categories = {\n    idea: {\n      label: \"Idea\",\n      icon: Brain,\n      description:\n        \"Exploratory thoughts and wild concepts for Teurons and beyond.\",\n    },\n    opinions: {\n      label: \"Opinions\",\n      icon: Megaphone,\n      description:\n        \"Subjective, wild, gut-hunch takes—less informed, out-of-box rants.\",\n    },\n  };\n\n  return (\n    categories[slug as keyof typeof categories] || {\n      label: slug.toString().replace(/-/g, \" \").toLowerCase(),\n      icon: BookIcon,\n    }\n  );\n};\n\nexport const getSeriesBySlug = (slug: string) => {\n  const series = {\n    x: {\n      label: \"Series X\",\n      icon: LucideBook,\n      description: \"A Sample Series\",\n    },\n    // Add more series here as needed\n  };\n\n  return (\n    series[slug as keyof typeof series] || {\n      label: slug.charAt(0).toUpperCase() + slug.slice(1),\n      icon: LucideBook,\n      description: `Articles in the ${\n        slug.charAt(0).toUpperCase() + slug.slice(1)\n      } series.`,\n    }\n  );\n};\n"
        },
        {
          "path": "app/globals.css",
          "append": "\n@import \"fumadocs-ui/css/neutral.css\";\n@import \"fumadocs-ui/css/preset.css\";\n@import \"../fumadocs-blog/styles/globals.css\";\n"
        },
        {
          "path": "content/blog/idea/zero-trust-security.mdx",
          "content": "---\ntitle: Zero Trust Security\ndescription: Why modern security architectures assume breach and verify everything\nauthor: lina\ndate: 2025-03-22\ntags: [security, zero trust, cybersecurity, enterprise]\nimage: https://shadcnblocks.com/images/block/placeholder-5.svg\n---\n\n# Zero Trust Security\n\nTraditional security models operated on the principle of \"trust but verify\" and focused on perimeter defense. Zero Trust flips this paradigm with a simple principle: never trust, always verify.\n\n## Core Principles\n\nZero Trust is built on several foundational ideas:\n\n### Assume Breach\n\nZero Trust architectures operate under the assumption that attackers are already present within the network.\n\n### Verify Explicitly\n\nEvery access request must be fully authenticated, authorized, and encrypted:\n\n1. Strong identity verification for all users\n2. Device health validation\n3. Just-in-time and just-enough access\n4. Context-aware policies\n\n## Implementation Strategies\n\nMoving to Zero Trust requires systematic changes:\n\n### Identity as the Control Plane\n\nModern security centers on identity rather than network location:\n\n### Micro-Segmentation\n\nNetwork security shifts from perimeter-based to fine-grained segmentation between workloads.\n"
        }
      ]
    },
    {
      "task": "npm_cmd",
      "commands": ["install", "run dev"],
      "package_manager": "auto"
    }
  ]
}
